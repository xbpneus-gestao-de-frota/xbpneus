#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Chatbot Avan√ßado com Perguntas Contextuais e Linguagem Natural
"""

from typing import Dict, List, Optional
from datetime import datetime
import json

class ChatbotAvancado:
    """
    Chatbot inteligente que faz perguntas contextuais para coletar
    informa√ß√µes completas sobre o pneu
    """
    
    def __init__(self):
        # Estados da conversa√ß√£o
        self.estados = {
            'INICIAL': 'inicial',
            'COLETANDO_BASICO': 'coletando_basico',
            'ANALISANDO_FOTOS': 'analisando_fotos',
            'COLETANDO_DETALHES': 'coletando_detalhes',
            'CONFIRMANDO': 'confirmando',
            'FINALIZANDO': 'finalizando'
        }
        
        # Perguntas contextuais organizadas por categoria
        self.perguntas = {
            'identificacao': [
                {
                    'pergunta': 'üìã Qual √© a **marca e modelo** do pneu?',
                    'campo': 'marca_modelo',
                    'tipo': 'texto',
                    'exemplo': 'Ex: Michelin XZE2+, Bridgestone R268, etc.'
                },
                {
                    'pergunta': 'üìè Qual a **medida** do pneu?',
                    'campo': 'medida',
                    'tipo': 'texto',
                    'exemplo': 'Ex: 295/80R22.5, 275/80R22.5, etc.'
                },
                {
                    'pergunta': 'üè∑Ô∏è Voc√™ consegue ver o c√≥digo **DOT** no pneu?',
                    'campo': 'dot',
                    'tipo': 'texto',
                    'opcional': True,
                    'exemplo': 'Ex: 2421 (semana 24 de 2021)'
                }
            ],
            'uso': [
                {
                    'pergunta': 'üöõ Em qual **posi√ß√£o** o pneu est√° instalado?',
                    'campo': 'posicao',
                    'tipo': 'opcao',
                    'opcoes': ['Dianteiro Esquerdo', 'Dianteiro Direito', 'Traseiro Esquerdo', 'Traseiro Direito', 'Reboque'],
                    'mapeamento': {
                        'dianteiro': 'DIRECAO',
                        'traseiro': 'TRACAO',
                        'reboque': 'REBOQUE'
                    }
                },
                {
                    'pergunta': 'üìä Quantos **quil√¥metros** o pneu j√° rodou (aproximadamente)?',
                    'campo': 'km_rodados',
                    'tipo': 'numero',
                    'exemplo': 'Ex: 45000'
                },
                {
                    'pergunta': 'üõ£Ô∏è Qual o **tipo de estrada** predominante?',
                    'campo': 'tipo_estrada',
                    'tipo': 'opcao',
                    'opcoes': ['Asfalto', 'Terra', 'Pedras', 'Mista (asfalto + terra)']
                }
            ],
            'condicao': [
                {
                    'pergunta': 'üí® Qual a **press√£o atual** do pneu (em PSI)?',
                    'campo': 'pressao_atual',
                    'tipo': 'numero',
                    'exemplo': 'Ex: 110, 120, etc.',
                    'opcional': True
                },
                {
                    'pergunta': 'üìê Qual a **profundidade do sulco** (em mm)?',
                    'campo': 'profundidade_sulco',
                    'tipo': 'numero',
                    'exemplo': 'Ex: 8.5, 12.0, etc.',
                    'opcional': True,
                    'ajuda': 'Use um profund√≠metro ou r√©gua'
                },
                {
                    'pergunta': '‚öñÔ∏è O ve√≠culo costuma rodar com **sobrecarga**?',
                    'campo': 'sobrecarga',
                    'tipo': 'opcao',
                    'opcoes': ['N√£o', '√Äs vezes', 'Frequentemente']
                }
            ],
            'problema': [
                {
                    'pergunta': 'üîç Descreva o **problema** que voc√™ est√° observando:',
                    'campo': 'descricao_problema',
                    'tipo': 'texto_longo',
                    'exemplo': 'Ex: Desgaste no centro, corte na lateral, bolha, etc.'
                },
                {
                    'pergunta': 'üìÖ **Quando** voc√™ notou o problema?',
                    'campo': 'quando_notou',
                    'tipo': 'opcao',
                    'opcoes': ['Hoje', 'Esta semana', 'Este m√™s', 'H√° mais tempo']
                },
                {
                    'pergunta': '‚ö° O problema est√° **piorando**?',
                    'campo': 'piorando',
                    'tipo': 'opcao',
                    'opcoes': ['Sim, rapidamente', 'Sim, aos poucos', 'N√£o, est√° est√°vel', 'N√£o sei']
                }
            ]
        }
    
    def iniciar_conversa(self) -> Dict:
        """
        Inicia uma nova conversa
        """
        return {
            'estado': self.estados['INICIAL'],
            'dados_coletados': {},
            'perguntas_respondidas': [],
            'proxima_pergunta': None,
            'mensagem': self._gerar_mensagem_boas_vindas()
        }
    
    def _gerar_mensagem_boas_vindas(self) -> str:
        """
        Gera mensagem de boas-vindas personalizada
        """
        return """ü§ñ *Ol√°! Sou o assistente inteligente de an√°lise de pneus.*

Vou te ajudar a analisar o pneu e preencher o formul√°rio de garantia.

Para fazer uma an√°lise completa, vou precisar de:
üì∏ **Fotos do pneu** (quanto mais, melhor!)
üìã **Algumas informa√ß√µes** sobre o pneu e seu uso

*Como funciona:*
1Ô∏è‚É£ Envie as fotos do pneu
2Ô∏è‚É£ Responda algumas perguntas r√°pidas
3Ô∏è‚É£ Receba o diagn√≥stico e formul√°rio pronto!

üì∏ **Comece enviando as fotos do pneu agora!**

*Dica:* Tire fotos da banda de rodagem, laterais, c√≥digo DOT e do defeito (se houver)."""
    
    def processar_resposta(self, sessao: Dict, resposta: str, tipo_entrada: str = 'texto') -> Dict:
        """
        Processa resposta do usu√°rio e determina pr√≥xima a√ß√£o
        
        Args:
            sessao: Estado atual da sess√£o
            resposta: Resposta do usu√°rio
            tipo_entrada: 'texto', 'imagem', 'opcao'
        
        Returns:
            Sess√£o atualizada com pr√≥xima a√ß√£o
        """
        estado_atual = sessao.get('estado', self.estados['INICIAL'])
        
        if tipo_entrada == 'imagem':
            return self._processar_imagem(sessao)
        
        elif estado_atual == self.estados['INICIAL']:
            return self._iniciar_coleta(sessao)
        
        elif estado_atual == self.estados['COLETANDO_BASICO']:
            return self._coletar_informacao_basica(sessao, resposta)
        
        elif estado_atual == self.estados['ANALISANDO_FOTOS']:
            return self._processar_analise_fotos(sessao, resposta)
        
        elif estado_atual == self.estados['COLETANDO_DETALHES']:
            return self._coletar_detalhes(sessao, resposta)
        
        elif estado_atual == self.estados['CONFIRMANDO']:
            return self._confirmar_dados(sessao, resposta)
        
        return sessao
    
    def _processar_imagem(self, sessao: Dict) -> Dict:
        """
        Processa recebimento de imagem
        """
        total_imagens = len(sessao.get('imagens', []))
        
        if total_imagens == 1:
            mensagem = """‚úÖ *Primeira foto recebida!*

üì∏ **Envie mais fotos** para uma an√°lise completa:
‚Ä¢ Banda de rodagem (vista de cima)
‚Ä¢ Lateral esquerda
‚Ä¢ Lateral direita  
‚Ä¢ C√≥digo DOT
‚Ä¢ Defeito espec√≠fico (se houver)

Ou digite *CONTINUAR* se j√° enviou todas as fotos."""
        
        elif total_imagens < 4:
            mensagem = f"""‚úÖ *{total_imagens} fotos recebidas!*

Continue enviando mais fotos ou digite *CONTINUAR* para prosseguir."""
        
        else:
            mensagem = f"""‚úÖ *{total_imagens} fotos recebidas - √ìtimo!*

Agora vou fazer algumas perguntas r√°pidas para completar a an√°lise.

Digite *CONTINUAR* quando estiver pronto."""
            sessao['estado'] = self.estados['ANALISANDO_FOTOS']
        
        sessao['mensagem'] = mensagem
        return sessao
    
    def _iniciar_coleta(self, sessao: Dict) -> Dict:
        """
        Inicia coleta de informa√ß√µes b√°sicas
        """
        sessao['estado'] = self.estados['COLETANDO_BASICO']
        sessao['categoria_atual'] = 'identificacao'
        sessao['indice_pergunta'] = 0
        
        return self._fazer_proxima_pergunta(sessao)
    
    def _coletar_informacao_basica(self, sessao: Dict, resposta: str) -> Dict:
        """
        Coleta informa√ß√µes b√°sicas do pneu
        """
        # Salvar resposta anterior
        if 'pergunta_atual' in sessao:
            campo = sessao['pergunta_atual']['campo']
            sessao['dados_coletados'][campo] = resposta
            sessao['perguntas_respondidas'].append(campo)
        
        # Pr√≥xima pergunta
        return self._fazer_proxima_pergunta(sessao)
    
    def _fazer_proxima_pergunta(self, sessao: Dict) -> Dict:
        """
        Determina e faz a pr√≥xima pergunta contextual
        """
        categoria = sessao.get('categoria_atual', 'identificacao')
        indice = sessao.get('indice_pergunta', 0)
        
        perguntas_categoria = self.perguntas.get(categoria, [])
        
        # Se ainda h√° perguntas nesta categoria
        if indice < len(perguntas_categoria):
            pergunta = perguntas_categoria[indice]
            sessao['pergunta_atual'] = pergunta
            sessao['indice_pergunta'] = indice + 1
            
            # Gerar mensagem da pergunta
            mensagem = pergunta['pergunta']
            
            if 'exemplo' in pergunta:
                mensagem += f"\n\nüí° {pergunta['exemplo']}"
            
            if pergunta.get('opcional'):
                mensagem += "\n\n_(Digite PULAR se n√£o souber)_"
            
            if pergunta.get('tipo') == 'opcao':
                mensagem += "\n\n*Op√ß√µes:*\n"
                for i, opcao in enumerate(pergunta['opcoes'], 1):
                    mensagem += f"{i}. {opcao}\n"
            
            sessao['mensagem'] = mensagem
            return sessao
        
        # Passar para pr√≥xima categoria
        categorias = list(self.perguntas.keys())
        idx_atual = categorias.index(categoria)
        
        if idx_atual < len(categorias) - 1:
            # Pr√≥xima categoria
            sessao['categoria_atual'] = categorias[idx_atual + 1]
            sessao['indice_pergunta'] = 0
            return self._fazer_proxima_pergunta(sessao)
        else:
            # Todas as perguntas respondidas
            return self._finalizar_coleta(sessao)
    
    def _processar_analise_fotos(self, sessao: Dict, resposta: str) -> Dict:
        """
        Processa comando para analisar fotos
        """
        if resposta.upper() in ['CONTINUAR', 'SIM', 'OK']:
            return self._iniciar_coleta(sessao)
        else:
            sessao['mensagem'] = "Digite *CONTINUAR* quando estiver pronto para prosseguir."
            return sessao
    
    def _coletar_detalhes(self, sessao: Dict, resposta: str) -> Dict:
        """
        Coleta detalhes adicionais baseado na an√°lise
        """
        # L√≥gica para perguntas contextuais baseadas nas fotos
        return sessao
    
    def _confirmar_dados(self, sessao: Dict, resposta: str) -> Dict:
        """
        Confirma dados coletados com o usu√°rio
        """
        if resposta.upper() in ['SIM', 'CONFIRMAR', 'OK']:
            sessao['estado'] = self.estados['FINALIZANDO']
            sessao['mensagem'] = """‚úÖ *Dados confirmados!*

üîÑ Processando an√°lise completa...

Aguarde alguns instantes."""
        else:
            sessao['mensagem'] = "Digite *SIM* para confirmar ou *CORRIGIR* para alterar alguma informa√ß√£o."
        
        return sessao
    
    def _finalizar_coleta(self, sessao: Dict) -> Dict:
        """
        Finaliza coleta e prepara para an√°lise
        """
        sessao['estado'] = self.estados['CONFIRMANDO']
        
        # Gerar resumo dos dados coletados
        resumo = self._gerar_resumo_dados(sessao['dados_coletados'])
        
        sessao['mensagem'] = f"""üìã *Resumo das Informa√ß√µes Coletadas:*

{resumo}

*Est√° tudo correto?*
Digite *SIM* para confirmar ou *CORRIGIR* para alterar."""
        
        return sessao
    
    def _gerar_resumo_dados(self, dados: Dict) -> str:
        """
        Gera resumo formatado dos dados coletados
        """
        resumo = ""
        
        if 'marca_modelo' in dados:
            resumo += f"üè∑Ô∏è Marca/Modelo: {dados['marca_modelo']}\n"
        if 'medida' in dados:
            resumo += f"üìè Medida: {dados['medida']}\n"
        if 'posicao' in dados:
            resumo += f"üöõ Posi√ß√£o: {dados['posicao']}\n"
        if 'km_rodados' in dados:
            resumo += f"üìä KM Rodados: {dados['km_rodados']}\n"
        if 'tipo_estrada' in dados:
            resumo += f"üõ£Ô∏è Tipo de Estrada: {dados['tipo_estrada']}\n"
        if 'descricao_problema' in dados:
            resumo += f"üîç Problema: {dados['descricao_problema']}\n"
        
        return resumo if resumo else "Nenhum dado coletado ainda."
    
    def gerar_pergunta_contextual(self, analise_fotos: Dict, dados_parciais: Dict) -> Optional[str]:
        """
        Gera pergunta contextual baseada na an√°lise das fotos
        
        Args:
            analise_fotos: Resultado da an√°lise de imagens
            dados_parciais: Dados j√° coletados
        
        Returns:
            Pergunta contextual ou None
        """
        # Se detectou desgaste irregular, perguntar sobre manuten√ß√£o
        if 'desgaste_irregular' in analise_fotos.get('problemas', []):
            if 'ultima_manutencao' not in dados_parciais:
                return """üîß Notei um desgaste irregular no pneu.

**Quando foi a √∫ltima vez** que o ve√≠culo passou por manuten√ß√£o (alinhamento, balanceamento)?

Isso me ajuda a identificar a causa do problema."""
        
        # Se detectou press√£o baixa, perguntar sobre calibragem
        if analise_fotos.get('pressao_aparente') == 'baixa':
            if 'frequencia_calibragem' not in dados_parciais:
                return """üí® O pneu parece estar com press√£o baixa.

**Com que frequ√™ncia** voc√™ calibra os pneus?

1. Semanalmente
2. Quinzenalmente  
3. Mensalmente
4. Raramente"""
        
        # Se detectou defeito estrutural, perguntar sobre impactos
        if 'defeito_estrutural' in analise_fotos.get('tipo_problema', ''):
            if 'impacto_recente' not in dados_parciais:
                return """‚ö†Ô∏è Detectei um poss√≠vel dano estrutural.

**O ve√≠culo sofreu algum impacto recentemente?**
(batida em meio-fio, buraco profundo, etc.)

Isso √© importante para determinar se √© defeito de fabrica√ß√£o ou uso."""
        
        return None
    
    def sugerir_proximo_passo(self, sessao: Dict) -> str:
        """
        Sugere pr√≥ximo passo baseado no contexto
        """
        total_imagens = len(sessao.get('imagens', []))
        dados = sessao.get('dados_coletados', {})
        
        if total_imagens == 0:
            return "üì∏ Envie fotos do pneu para come√ßar a an√°lise."
        
        elif total_imagens < 3:
            return "üì∏ Envie mais fotos para uma an√°lise mais precisa."
        
        elif not dados.get('marca_modelo'):
            return "üìã Me informe a marca e modelo do pneu."
        
        elif not dados.get('km_rodados'):
            return "üìä Me informe quantos km o pneu j√° rodou."
        
        else:
            return "‚úÖ Pronto para an√°lise! Digite ANALISAR."

def exemplo_uso():
    """Exemplo de uso do chatbot avan√ßado"""
    print("="*70)
    print("CHATBOT AVAN√áADO COM PERGUNTAS CONTEXTUAIS")
    print("="*70 + "\n")
    
    chatbot = ChatbotAvancado()
    
    # Iniciar conversa
    print("ü§ñ INICIANDO CONVERSA")
    print("-" * 70)
    sessao = chatbot.iniciar_conversa()
    print(sessao['mensagem'])
    
    # Simular recebimento de fotos
    print("\n\nüë§ [Usu√°rio envia 3 fotos]")
    print("-" * 70)
    sessao['imagens'] = ['foto1.jpg', 'foto2.jpg', 'foto3.jpg']
    sessao = chatbot._processar_imagem(sessao)
    print(sessao['mensagem'])
    
    # Simular in√≠cio da coleta
    print("\n\nüë§ Usu√°rio: CONTINUAR")
    print("-" * 70)
    sessao = chatbot.processar_resposta(sessao, 'CONTINUAR', 'texto')
    print(sessao['mensagem'])
    
    # Simular resposta
    print("\n\nüë§ Usu√°rio: Michelin XZE2+")
    print("-" * 70)
    sessao = chatbot.processar_resposta(sessao, 'Michelin XZE2+', 'texto')
    print(sessao['mensagem'])
    
    print("\n" + "="*70)
    print("‚úÖ Chatbot avan√ßado funcionando!")
    print("="*70)

if __name__ == "__main__":
    exemplo_uso()


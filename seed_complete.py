#!/usr/bin/env python3
"""
Script de seed completo - Popular banco com dados de teste
Uso: python seed_complete.py
"""
import os, sys, django
from datetime import datetime, timedelta, date
from decimal import Decimal

os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'config.settings')
django.setup()

from backend.empresas.models import Empresa
from backend.users.models import User
from backend.transportador.frota.models import Vehicle, Position
from backend.transportador.motorista_interno.models import MotoristaInterno
from backend.transportador.pneus.models import Tire
from backend.transportador.estoque.models import Produto, CategoriaProduto
from backend.transportador.clientes.models import Cliente
from backend.transportador.fornecedores.models import Fornecedor
from backend.transportador.combustivel.models import PostoCombustivel, Abastecimento
from backend.transportador.custos.models import CategoriaCusto, Custo
from backend.transportador.multas.models import Multa
from backend.transportador.viagens.models import Viagem

def limpar_dados():
    """Limpar dados de teste anteriores"""
    print("üóëÔ∏è  Limpando dados anteriores...")
    Viagem.objects.all().delete()
    Multa.objects.all().delete()
    Custo.objects.all().delete()
    Abastecimento.objects.all().delete()
    Produto.objects.all().delete()
    CategoriaProduto.objects.all().delete()
    Tire.objects.all().delete()
    Position.objects.all().delete()
    Vehicle.objects.all().delete()
    MotoristaInterno.objects.all().delete()
    PostoCombustivel.objects.all().delete()
    CategoriaCusto.objects.all().delete()
    Cliente.objects.filter(cnpj__startswith='111').delete()
    Fornecedor.objects.filter(cnpj__startswith='222').delete()
    print("   ‚úÖ Dados limpos\n")

def seed():
    print("=" * 80)
    print("SEED COMPLETO - XBPNEUS v10.0.4")
    print("=" * 80 + "\n")
    
    # Limpar dados anteriores
    limpar_dados()
    
    # Empresa
    print("üì¶ Empresa...")
    empresa = Empresa.objects.first()
    if not empresa:
        empresa = Empresa.objects.create(
            cnpj='12345678000190',
            nome='Transportadora XB Pneus Ltda',
            razao_social='XB Pneus Transportes Ltda'
        )
    print(f"   ‚úÖ {empresa.nome}\n")
    
    # Motoristas
    print("üöõ Motoristas...")
    motoristas = []
    nomes = ['Jo√£o Silva', 'Maria Santos', 'Pedro Oliveira', 'Ana Costa', 'Carlos Souza']
    for i, nome in enumerate(nomes, 1):
        m = MotoristaInterno.objects.create(
            cpf=f'{i:011d}',
            nome_completo=nome,
            cnh=f'SP{i:09d}',
            categoria_cnh='E',
            validade_cnh=date(2026, 12, 31),
            data_nascimento=date(1980 + i, 1, 1),
            data_admissao=date(2020, 1, 1),
            tipo_contrato='CLT',
            status='Ativo',
        )
        motoristas.append(m)
        print(f"   ‚úÖ {m.nome_completo}")
    print()
    
    # Ve√≠culos
    print("üöö Ve√≠culos...")
    veiculos_data = [
        {'placa': 'ABC1234', 'marca': 'Scania', 'modelo': 'R450', 'tipo': 'Caminh√£o', 'eixos': 3, 'posicoes': 10},
        {'placa': 'DEF5678', 'marca': 'Volvo', 'modelo': 'FH540', 'tipo': 'Caminh√£o', 'eixos': 3, 'posicoes': 10},
        {'placa': 'GHI9012', 'marca': 'Mercedes', 'modelo': 'Actros', 'tipo': 'Caminh√£o', 'eixos': 3, 'posicoes': 10},
        {'placa': 'JKL3456', 'marca': 'Iveco', 'modelo': 'Stralis', 'tipo': 'Caminh√£o', 'eixos': 3, 'posicoes': 10},
        {'placa': 'MNO7890', 'marca': 'Randon', 'modelo': 'Bitrem', 'tipo': 'Carreta', 'eixos': 2, 'posicoes': 8},
    ]
    
    veiculos = []
    for data in veiculos_data:
        v = Vehicle.objects.create(
            placa=data['placa'],
            marca=data['marca'],
            modelo=data['modelo'],
            tipo=data['tipo'],
            status='Ativo',
            km=50000,
            km_ultima_manutencao=48000,
            numero_eixos=data['eixos'],
            total_posicoes_pneus=data['posicoes'],
            ano_fabricacao=2020,
        )
        veiculos.append(v)
        print(f"   ‚úÖ {v.placa} - {v.marca} {v.modelo}")
    print()
    
    # Posi√ß√µes de Pneus
    print("üìç Posi√ß√µes de Pneus...")
    total_pos = 0
    for veiculo in veiculos:
        for i in range(1, veiculo.total_posicoes_pneus + 1):
            Position.objects.create(
                veiculo=veiculo,
                eixo=((i-1) // 2) + 1,
                lado='Esquerdo' if i % 2 == 1 else 'Direito',
                tipo='Tra√ß√£o' if i <= 4 else 'Livre',
                posicao=i,
            )
            total_pos += 1
    print(f"   ‚úÖ {total_pos} posi√ß√µes criadas\n")
    
    # Pneus
    print("üõû Pneus...")
    marcas = ['Michelin', 'Pirelli', 'Goodyear', 'Bridgestone', 'Continental']
    modelos = ['XZA2', 'FG85', 'G159', 'R268', 'HSR2']
    for i in range(1, 51):  # 50 pneus
        Tire.objects.create(
            numero_fogo=f'PN{i:04d}',
            marca=marcas[i % len(marcas)],
            modelo=modelos[i % len(modelos)],
            medida='295/80R22.5',
            tipo='Novo' if i <= 30 else 'Recapado',
            status='Estoque',
            dot=f'2024{i:02d}',
        )
    print(f"   ‚úÖ 50 pneus criados\n")
    
    # Categorias de Produtos
    print("üìÅ Categorias de Produtos...")
    cats = []
    for nome in ['Pneus', 'Pe√ßas', 'Ferramentas', 'EPIs', 'Lubrificantes']:
        c = CategoriaProduto.objects.create(
            nome=nome,
            descricao=f'Categoria {nome}',
        )
        cats.append(c)
    print(f"   ‚úÖ {len(cats)} categorias\n")
    
    # Produtos
    print("üì¶ Produtos...")
    produtos_data = [
        ('PN001', 'Pneu 295/80R22.5 Michelin XZA2', Decimal('1200.00'), cats[0]),
        ('PN002', 'Pneu 295/80R22.5 Pirelli FG85', Decimal('1150.00'), cats[0]),
        ('PC001', 'Filtro de √ìleo', Decimal('45.00'), cats[1]),
        ('PC002', 'Filtro de Ar', Decimal('85.00'), cats[1]),
        ('PC003', 'Pastilha de Freio', Decimal('250.00'), cats[1]),
        ('FR001', 'Chave de Roda', Decimal('120.00'), cats[2]),
        ('FR002', 'Macaco Hidr√°ulico', Decimal('450.00'), cats[2]),
        ('EP001', 'Capacete de Seguran√ßa', Decimal('35.00'), cats[3]),
        ('EP002', 'Luvas de Prote√ß√£o', Decimal('15.00'), cats[3]),
        ('LB001', '√ìleo Motor 15W40', Decimal('180.00'), cats[4]),
    ]
    
    for codigo, nome, preco, cat in produtos_data:
        Produto.objects.create(
            codigo=codigo,
            nome=nome,
            preco_unitario=preco,
            categoria=cat,
            unidade='UN',
        )
    print(f"   ‚úÖ {len(produtos_data)} produtos\n")
    
    # Clientes
    print("üëî Clientes...")
    clientes_data = [
        ('Empresa ABC Ltda', '11122233300014'),
        ('Ind√∫stria XYZ S/A', '11144455500017'),
        ('Com√©rcio 123 Eireli', '11177788800015'),
        ('Distribuidora Alfa', '11199900000011'),
        ('Log√≠stica Beta', '11122244400018'),
    ]
    
    for nome, cnpj in clientes_data:
        Cliente.objects.create(
            nome=nome,
            cnpj=cnpj,
        )
    print(f"   ‚úÖ {len(clientes_data)} clientes\n")
    
    # Fornecedores
    print("üè≠ Fornecedores...")
    fornecedores_data = [
        ('Distribuidora de Pneus Sul', '22233344400015'),
        ('Auto Pe√ßas R√°pidas', '22255666700018'),
        ('Ferramentas Industriais Ltda', '22288999000011'),
        ('Lubrificantes Premium', '22211122200014'),
        ('EPIs Seguran√ßa Total', '22244455500017'),
    ]
    
    for nome, cnpj in fornecedores_data:
        Fornecedor.objects.create(
            nome=nome,
            cnpj=cnpj,
        )
    print(f"   ‚úÖ {len(fornecedores_data)} fornecedores\n")
    
    # Postos de Combust√≠vel
    print("‚õΩ Postos de Combust√≠vel...")
    postos_data = [
        ('Posto Shell BR-101 KM 250', '33312312300013'),
        ('Posto Ipiranga Rodovia SP-348', '33345645600016'),
        ('Posto Petrobras BR-116', '33388999000011'),
    ]
    
    postos = []
    for nome, cnpj in postos_data:
        p = PostoCombustivel.objects.create(
            nome=nome,
            cnpj=cnpj,
        )
        postos.append(p)
    print(f"   ‚úÖ {len(postos)} postos\n")
    
    # Abastecimentos
    print("‚õΩ Abastecimentos...")
    for i, veiculo in enumerate(veiculos, 1):
        for j in range(1, 4):  # 3 abastecimentos por ve√≠culo
            Abastecimento.objects.create(
                veiculo=veiculo,
                posto=postos[(i + j) % len(postos)],
                data=date.today() - timedelta(days=j*7),
                litros=Decimal('200.00') + Decimal(j * 10),
                valor_total=Decimal('1200.00') + Decimal(j * 60),
                km_atual=50000 - (j * 500),
                tipo_combustivel='Diesel S10',
            )
    print(f"   ‚úÖ {len(veiculos) * 3} abastecimentos\n")
    
    # Categorias de Custo
    print("üí∞ Categorias de Custo...")
    cat_custos_data = ['Combust√≠vel', 'Manuten√ß√£o', 'Pneus', 'Ped√°gio', 'Seguro', 'IPVA']
    cat_custos = []
    for nome in cat_custos_data:
        c = CategoriaCusto.objects.create(
            nome=nome,
            descricao=f'Custos com {nome}',
        )
        cat_custos.append(c)
    print(f"   ‚úÖ {len(cat_custos)} categorias\n")
    
    # Custos
    print("üí∞ Custos...")
    for i, veiculo in enumerate(veiculos, 1):
        for j, cat in enumerate(cat_custos[:3], 1):  # 3 custos por ve√≠culo
            Custo.objects.create(
                veiculo=veiculo,
                categoria=cat,
                data=date.today() - timedelta(days=j*5),
                descricao=f'Custo de {cat.nome} - {veiculo.placa}',
                valor=Decimal('500.00') + Decimal(j * 100),
            )
    print(f"   ‚úÖ {len(veiculos) * 3} custos\n")
    
    # Multas
    print("üö® Multas...")
    tipos_infracao = [
        'Excesso de velocidade',
        'Ultrapassagem indevida',
        'Estacionamento irregular',
        'Falta de equipamento obrigat√≥rio',
    ]
    
    for i, veiculo in enumerate(veiculos[:3], 1):  # 3 ve√≠culos com multas
        for j in range(1, 3):  # 2 multas por ve√≠culo
            Multa.objects.create(
                numero_auto=f'AUTO{i:03d}{j:03d}',
                veiculo=veiculo,
                data_infracao=date.today() - timedelta(days=j*15),
                tipo_infracao=tipos_infracao[(i + j) % len(tipos_infracao)],
                valor=Decimal('195.23') + Decimal(j * 100),
                pontos=5 + j,
                status='Pendente',
                local_infracao=f'BR-101 KM {100 + i*10}',
            )
    print(f"   ‚úÖ 6 multas\n")
    
    # Viagens
    print("üó∫Ô∏è  Viagens...")
    rotas = [
        ('S√£o Paulo - SP', 'Rio de Janeiro - RJ', 450),
        ('S√£o Paulo - SP', 'Curitiba - PR', 400),
        ('S√£o Paulo - SP', 'Belo Horizonte - MG', 580),
        ('Rio de Janeiro - RJ', 'Belo Horizonte - MG', 430),
        ('Curitiba - PR', 'Florian√≥polis - SC', 300),
    ]
    
    for i, veiculo in enumerate(veiculos, 1):
        origem, destino, km = rotas[i % len(rotas)]
        for j in range(1, 4):  # 3 viagens por ve√≠culo
            data_saida = date.today() - timedelta(days=j*10)
            data_chegada = data_saida + timedelta(days=1)
            
            Viagem.objects.create(
                veiculo=veiculo,
                motorista=motoristas[(i + j) % len(motoristas)],
                origem=origem,
                destino=destino,
                data_saida=data_saida,
                data_chegada=data_chegada,
                km_inicial=50000 - (j * km),
                km_final=50000 - (j * km) + km,
                status='Conclu√≠da',
            )
    print(f"   ‚úÖ {len(veiculos) * 3} viagens\n")
    
    print("=" * 80)
    print("‚úÖ SEED CONCLU√çDO COM SUCESSO!")
    print("=" * 80)
    print("\nüìä Resumo dos Dados Criados:")
    print(f"   ‚Ä¢ 1 Empresa")
    print(f"   ‚Ä¢ {len(motoristas)} Motoristas")
    print(f"   ‚Ä¢ {len(veiculos)} Ve√≠culos")
    print(f"   ‚Ä¢ {total_pos} Posi√ß√µes de Pneus")
    print(f"   ‚Ä¢ 50 Pneus")
    print(f"   ‚Ä¢ {len(cats)} Categorias de Produtos")
    print(f"   ‚Ä¢ {len(produtos_data)} Produtos")
    print(f"   ‚Ä¢ {len(clientes_data)} Clientes")
    print(f"   ‚Ä¢ {len(fornecedores_data)} Fornecedores")
    print(f"   ‚Ä¢ {len(postos)} Postos de Combust√≠vel")
    print(f"   ‚Ä¢ {len(veiculos) * 3} Abastecimentos")
    print(f"   ‚Ä¢ {len(cat_custos)} Categorias de Custo")
    print(f"   ‚Ä¢ {len(veiculos) * 3} Custos")
    print(f"   ‚Ä¢ 6 Multas")
    print(f"   ‚Ä¢ {len(veiculos) * 3} Viagens")
    print("\nüîë Credenciais:")
    print("   ‚Ä¢ admin / admin123")
    print("\n‚úÖ Banco de dados populado e pronto para testes!\n")

if __name__ == '__main__':
    try:
        seed()
    except Exception as e:
        print(f"\n‚ùå ERRO: {e}")
        import traceback
        traceback.print_exc()
        sys.exit(1)
